/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author kennytran
 */
public class Server extends javax.swing.JFrame {
    private ServerSocket server;
    private ServerClient[] clients;
    private String serverMessage;
    /**
     * Creates new form ServerGui
     */
    public Server() {
        initComponents();
        clients=new ServerClient[2];
        setVisible(true);
    }
    public void runServer()
    {
        try{
            server=new ServerSocket(12345,100);
                try{
                    waitForConnection();
                    
                }catch(EOFException eofException){
                    
                }
            
        }catch(IOException ioException){
            ioException.printStackTrace();
        }
    }
    private void sendMessage(String s){
        for(int i=0;i<clients.length;i++){
          try{
            clients[i].output.writeObject("Server: "+s+"\n");
            clients[i].output.flush();
        }catch(IOException ioException){
            System.out.println("ioException");
        }
        }
            displayMessage("Me: "+s+"\n");
    }
    private void sendMessageToOtherClients(String s,int clientNumber){
        for(int i=0;i<clients.length;i++){
          if(i!=clientNumber){
              try{
            clients[i].output.writeObject("Client"+clientNumber+":"+s+"\n");
            clients[i].output.flush();
        }catch(IOException ioException){
            System.out.println("ioException");
        }
          }
        }
    }
    private void waitForConnection() throws IOException{
        for(int i=0;i<clients.length;i++){
            clients[i]=new ServerClient(server.accept(),i);
            (new Thread(clients[i])).start();
        }
        displayMessage("get connection");
    }
    
    private void displayMessage(final String message){
        SwingUtilities.invokeLater(
        new Runnable()
                {
                    public void run(){
                    displayArea.append(message);
                    }
                }
                );
    }
   /* private void sendMessage(String s){
          try{
            output.writeObject("Server: "+s+"\n");
            output.flush();
            displayMessage("Me: "+s+"\n");
        }catch(IOException ioException){
            
        }
    } */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        enterField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        displayArea.setEditable(false);
        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane1.setViewportView(displayArea);

        enterField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterFieldActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cancelButton)
                            .addComponent(enterField, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(enterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enterFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterFieldActionPerformed
        serverMessage=evt.getActionCommand();
        sendMessage(serverMessage);
        enterField.setText("");       
    }//GEN-LAST:event_enterFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeServerConnection(); 
        dispose();// TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed
    private void closeServerConnection(){
        for(int i=0;i<clients.length;i++){
            if(clients[i]!=null) try {
                clients[i].closeConnection();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
         Server server=null;
     //   java.awt.EventQueue.invokeLater(new Runnable() {
       //     public void run() {
                 server= new Server();
         //   }
        //});
                server.runServer();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea displayArea;
    private javax.swing.JTextField enterField;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
public class ServerClient implements Runnable{
    private Socket connection;
    private int clientNumber;
    private ObjectOutputStream output;
    private ObjectInputStream input;
    public ServerClient(Socket socket,int number){
        clientNumber=number;
        connection=socket;
        try{
            getStream();
        }catch(IOException ioException){
            
        }
    }
    private synchronized void process() throws IOException{
        String message="Connection successful\n";
        displayMessage(message);
        do{
            try{
                message=(String) input.readObject();
                System.out.println(message);
                        if(message.equals("terminate\n")){
                            displayMessage("Client"+clientNumber+": "+message);
                            clients[clientNumber]=null;
                        }else{
               // System.out.println(message);
                    sendMessageToOtherClients(message,clientNumber);
                    displayMessage("Client"+clientNumber+": "+message);
                        }
               /* if(!s.equals(serverMessage)){
                    s=serverMessage;
                    System.out.println("get here");
                    sendMessage(s);
                }*/
            }catch(ClassNotFoundException classNotFoundException){
                
            }
        }while(true);
        
    }
    private void closeConnection() throws IOException{
          //  enterField.setEditable(false);
            sendMessage("terminate");
            output.close();
            input.close();
            connection.close();
    }
    private void getStream() throws IOException{
        output=new ObjectOutputStream(connection.getOutputStream());
        output.flush();
        input=new ObjectInputStream(connection.getInputStream());
    }
        @Override
        public void run() {
            try{
                process();
                
            }catch(IOException ioException){
                
            }
           /* finally{
                try {
                    closeConnection();
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
            }*/
        }
    }
}
